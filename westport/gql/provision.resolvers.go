package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"errors"

	jwt "github.com/golang-jwt/jwt/v5"
	"github.com/sprisa/west/util/auth"
	l "github.com/sprisa/west/util/log"
)

// ProvisionDevice is the resolver for the provision_device field.
func (r *mutationResolver) ProvisionDevice(ctx context.Context, input ProvisionDeviceInput) (*ProvisionDeviceResponse, error) {
	claims := &auth.TokenClaims{}
	parser := jwt.NewParser()
	_, err := parser.ParseWithClaims(input.Token, claims, func(t *jwt.Token) (any, error) {
		return "myfancykeyhere", nil
	})
	if err != nil {
		l.Log.Err(err).Msg("ProvisionDevice: error parsing jwt")
		return nil, errors.New("error parsing jwt")
	}

	res := &ProvisionDeviceResponse{
		Cert:          "",
		Key:           "",
		AccessToken:   "",
		NetworkCipher: "",
	}
	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
