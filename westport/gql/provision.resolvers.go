package gql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"errors"
	"net/netip"
	"time"

	jwt "github.com/golang-jwt/jwt/v5"
	"github.com/sprisa/west/util/auth"
	"github.com/sprisa/west/util/errutil"
	l "github.com/sprisa/west/util/log"
	"github.com/sprisa/west/util/pki"
	"github.com/sprisa/west/westport/db/ent/device"
	"github.com/sprisa/west/westport/db/helpers"
)

// ProvisionDevice is the resolver for the provision_device field.
func (r *mutationResolver) ProvisionDevice(ctx context.Context, input ProvisionDeviceInput) (*ProvisionDeviceResponse, error) {
	settings, err := r.client.Settings.Query().Only(ctx)
	if err != nil {
		return nil, errutil.WrapError(err, "error fetching settings")
	}
	dvc, err := r.client.Device.Query().
		Where(device.Token(helpers.EncryptedBytes(input.Token))).
		Only(ctx)
	if err != nil {
		return nil, errutil.WrapError(err, "error finding device")
	}

	claims := &auth.TokenClaims{}
	parser := jwt.NewParser()
	_, err = parser.ParseWithClaims(input.Token, claims, func(t *jwt.Token) (any, error) {
		return helpers.EncryptionKey, nil
	})
	if err != nil {
		l.Log.Err(err).Msg("ProvisionDevice: error parsing jwt")
		return nil, errors.New("error parsing jwt")
	}

	if claims.ExpiresAt.After(time.Now()) {
		return nil, errors.New("invalid token")
	}

	ip := dvc.IP.ToIpAddr()
	nebulaIp := netip.PrefixFrom(ip, settings.Cidr.Bits())

	cert, err := pki.SignCert(&pki.SignCertOptions{
		CaCrt: settings.CaCrt,
		CaKey: settings.CaKey,
		Name:  dvc.Name,
		Ip:    nebulaIp.String(),
	})

	res := &ProvisionDeviceResponse{
		Name:          dvc.Name,
		Cert:          string(cert.Cert),
		Key:           string(cert.Key),
		AccessToken:   "todo",
		NetworkCipher: settings.Cipher,
	}
	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
