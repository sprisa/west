// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sprisa/west/util/ipconv"
	"github.com/sprisa/west/westport/db/ent/device"
	"github.com/sprisa/west/westport/db/helpers"
)

// Device is the model entity for the Device schema.
type Device struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time ent was created
	CreatedTime time.Time `json:"created_time,omitempty"`
	// Time ent was updated
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Device name. Unique within the Network
	Name string `json:"name,omitempty"`
	// Overlay IPv4 of host
	IP ipconv.IP `json:"ip,omitempty"`
	// Access Token leased to a provisioned device. Can only issue 1 at a time, similar to a lock. Used to verify only 1 instance of the Device is running.
	LeasedAccessToken *string `json:"-"`
	// Token holds the value of the "token" field.
	Token        helpers.EncryptedBytes `json:"-"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Device) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case device.FieldToken:
			values[i] = new(helpers.EncryptedBytes)
		case device.FieldID, device.FieldIP:
			values[i] = new(sql.NullInt64)
		case device.FieldName, device.FieldLeasedAccessToken:
			values[i] = new(sql.NullString)
		case device.FieldCreatedTime, device.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Device fields.
func (_m *Device) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case device.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case device.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				_m.CreatedTime = value.Time
			}
		case device.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				_m.UpdatedTime = value.Time
			}
		case device.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case device.FieldIP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				_m.IP = ipconv.IP(value.Int64)
			}
		case device.FieldLeasedAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field leased_access_token", values[i])
			} else if value.Valid {
				_m.LeasedAccessToken = new(string)
				*_m.LeasedAccessToken = value.String
			}
		case device.FieldToken:
			if value, ok := values[i].(*helpers.EncryptedBytes); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value != nil {
				_m.Token = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Device.
// This includes values selected through modifiers, order, etc.
func (_m *Device) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Device.
// Note that you need to call Device.Unwrap() before calling this method if this Device
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Device) Update() *DeviceUpdateOne {
	return NewDeviceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Device entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Device) Unwrap() *Device {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Device is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Device) String() string {
	var builder strings.Builder
	builder.WriteString("Device(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_time=")
	builder.WriteString(_m.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(_m.UpdatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(fmt.Sprintf("%v", _m.IP))
	builder.WriteString(", ")
	builder.WriteString("leased_access_token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("token=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// Devices is a parsable slice of Device.
type Devices []*Device
