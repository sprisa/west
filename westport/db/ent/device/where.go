// Code generated by ent, DO NOT EDIT.

package device

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sprisa/west/util/ipconv"
	"github.com/sprisa/west/westport/db/ent/predicate"
	"github.com/sprisa/west/westport/db/helpers"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldID, id))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedTime, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldName, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v ipconv.IP) predicate.Device {
	vc := uint32(v)
	return predicate.Device(sql.FieldEQ(FieldIP, vc))
}

// LeasedAccessToken applies equality check predicate on the "leased_access_token" field. It's identical to LeasedAccessTokenEQ.
func LeasedAccessToken(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldLeasedAccessToken, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldToken, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldUpdatedTime, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldName, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v ipconv.IP) predicate.Device {
	vc := uint32(v)
	return predicate.Device(sql.FieldEQ(FieldIP, vc))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v ipconv.IP) predicate.Device {
	vc := uint32(v)
	return predicate.Device(sql.FieldNEQ(FieldIP, vc))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...ipconv.IP) predicate.Device {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.Device(sql.FieldIn(FieldIP, v...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...ipconv.IP) predicate.Device {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint32(vs[i])
	}
	return predicate.Device(sql.FieldNotIn(FieldIP, v...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v ipconv.IP) predicate.Device {
	vc := uint32(v)
	return predicate.Device(sql.FieldGT(FieldIP, vc))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v ipconv.IP) predicate.Device {
	vc := uint32(v)
	return predicate.Device(sql.FieldGTE(FieldIP, vc))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v ipconv.IP) predicate.Device {
	vc := uint32(v)
	return predicate.Device(sql.FieldLT(FieldIP, vc))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v ipconv.IP) predicate.Device {
	vc := uint32(v)
	return predicate.Device(sql.FieldLTE(FieldIP, vc))
}

// LeasedAccessTokenEQ applies the EQ predicate on the "leased_access_token" field.
func LeasedAccessTokenEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenNEQ applies the NEQ predicate on the "leased_access_token" field.
func LeasedAccessTokenNEQ(v string) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenIn applies the In predicate on the "leased_access_token" field.
func LeasedAccessTokenIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldLeasedAccessToken, vs...))
}

// LeasedAccessTokenNotIn applies the NotIn predicate on the "leased_access_token" field.
func LeasedAccessTokenNotIn(vs ...string) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldLeasedAccessToken, vs...))
}

// LeasedAccessTokenGT applies the GT predicate on the "leased_access_token" field.
func LeasedAccessTokenGT(v string) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenGTE applies the GTE predicate on the "leased_access_token" field.
func LeasedAccessTokenGTE(v string) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenLT applies the LT predicate on the "leased_access_token" field.
func LeasedAccessTokenLT(v string) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenLTE applies the LTE predicate on the "leased_access_token" field.
func LeasedAccessTokenLTE(v string) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenContains applies the Contains predicate on the "leased_access_token" field.
func LeasedAccessTokenContains(v string) predicate.Device {
	return predicate.Device(sql.FieldContains(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenHasPrefix applies the HasPrefix predicate on the "leased_access_token" field.
func LeasedAccessTokenHasPrefix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasPrefix(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenHasSuffix applies the HasSuffix predicate on the "leased_access_token" field.
func LeasedAccessTokenHasSuffix(v string) predicate.Device {
	return predicate.Device(sql.FieldHasSuffix(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenIsNil applies the IsNil predicate on the "leased_access_token" field.
func LeasedAccessTokenIsNil() predicate.Device {
	return predicate.Device(sql.FieldIsNull(FieldLeasedAccessToken))
}

// LeasedAccessTokenNotNil applies the NotNil predicate on the "leased_access_token" field.
func LeasedAccessTokenNotNil() predicate.Device {
	return predicate.Device(sql.FieldNotNull(FieldLeasedAccessToken))
}

// LeasedAccessTokenEqualFold applies the EqualFold predicate on the "leased_access_token" field.
func LeasedAccessTokenEqualFold(v string) predicate.Device {
	return predicate.Device(sql.FieldEqualFold(FieldLeasedAccessToken, v))
}

// LeasedAccessTokenContainsFold applies the ContainsFold predicate on the "leased_access_token" field.
func LeasedAccessTokenContainsFold(v string) predicate.Device {
	return predicate.Device(sql.FieldContainsFold(FieldLeasedAccessToken, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v helpers.EncryptedBytes) predicate.Device {
	return predicate.Device(sql.FieldLTE(FieldToken, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Device) predicate.Device {
	return predicate.Device(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Device) predicate.Device {
	return predicate.Device(sql.NotPredicates(p))
}
