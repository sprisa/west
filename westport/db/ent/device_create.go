// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sprisa/west/util/ipconv"
	"github.com/sprisa/west/westport/db/ent/device"
	"github.com/sprisa/west/westport/db/helpers"
)

// DeviceCreate is the builder for creating a Device entity.
type DeviceCreate struct {
	config
	mutation *DeviceMutation
	hooks    []Hook
}

// SetCreatedTime sets the "created_time" field.
func (_c *DeviceCreate) SetCreatedTime(v time.Time) *DeviceCreate {
	_c.mutation.SetCreatedTime(v)
	return _c
}

// SetNillableCreatedTime sets the "created_time" field if the given value is not nil.
func (_c *DeviceCreate) SetNillableCreatedTime(v *time.Time) *DeviceCreate {
	if v != nil {
		_c.SetCreatedTime(*v)
	}
	return _c
}

// SetUpdatedTime sets the "updated_time" field.
func (_c *DeviceCreate) SetUpdatedTime(v time.Time) *DeviceCreate {
	_c.mutation.SetUpdatedTime(v)
	return _c
}

// SetNillableUpdatedTime sets the "updated_time" field if the given value is not nil.
func (_c *DeviceCreate) SetNillableUpdatedTime(v *time.Time) *DeviceCreate {
	if v != nil {
		_c.SetUpdatedTime(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *DeviceCreate) SetName(v string) *DeviceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *DeviceCreate) SetNillableName(v *string) *DeviceCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetIP sets the "ip" field.
func (_c *DeviceCreate) SetIP(v ipconv.IP) *DeviceCreate {
	_c.mutation.SetIP(v)
	return _c
}

// SetLeasedAccessToken sets the "leased_access_token" field.
func (_c *DeviceCreate) SetLeasedAccessToken(v string) *DeviceCreate {
	_c.mutation.SetLeasedAccessToken(v)
	return _c
}

// SetNillableLeasedAccessToken sets the "leased_access_token" field if the given value is not nil.
func (_c *DeviceCreate) SetNillableLeasedAccessToken(v *string) *DeviceCreate {
	if v != nil {
		_c.SetLeasedAccessToken(*v)
	}
	return _c
}

// SetToken sets the "token" field.
func (_c *DeviceCreate) SetToken(v helpers.EncryptedBytes) *DeviceCreate {
	_c.mutation.SetToken(v)
	return _c
}

// Mutation returns the DeviceMutation object of the builder.
func (_c *DeviceCreate) Mutation() *DeviceMutation {
	return _c.mutation
}

// Save creates the Device in the database.
func (_c *DeviceCreate) Save(ctx context.Context) (*Device, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *DeviceCreate) SaveX(ctx context.Context) *Device {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DeviceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DeviceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *DeviceCreate) defaults() {
	if _, ok := _c.mutation.CreatedTime(); !ok {
		v := device.DefaultCreatedTime()
		_c.mutation.SetCreatedTime(v)
	}
	if _, ok := _c.mutation.UpdatedTime(); !ok {
		v := device.DefaultUpdatedTime()
		_c.mutation.SetUpdatedTime(v)
	}
	if _, ok := _c.mutation.Name(); !ok {
		v := device.DefaultName()
		_c.mutation.SetName(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *DeviceCreate) check() error {
	if _, ok := _c.mutation.CreatedTime(); !ok {
		return &ValidationError{Name: "created_time", err: errors.New(`ent: missing required field "Device.created_time"`)}
	}
	if _, ok := _c.mutation.UpdatedTime(); !ok {
		return &ValidationError{Name: "updated_time", err: errors.New(`ent: missing required field "Device.updated_time"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Device.name"`)}
	}
	if _, ok := _c.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Device.ip"`)}
	}
	if v, ok := _c.mutation.IP(); ok {
		if err := device.IPValidator(uint32(v)); err != nil {
			return &ValidationError{Name: "ip", err: fmt.Errorf(`ent: validator failed for field "Device.ip": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "Device.token"`)}
	}
	return nil
}

func (_c *DeviceCreate) sqlSave(ctx context.Context) (*Device, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *DeviceCreate) createSpec() (*Device, *sqlgraph.CreateSpec) {
	var (
		_node = &Device{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(device.Table, sqlgraph.NewFieldSpec(device.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.CreatedTime(); ok {
		_spec.SetField(device.FieldCreatedTime, field.TypeTime, value)
		_node.CreatedTime = value
	}
	if value, ok := _c.mutation.UpdatedTime(); ok {
		_spec.SetField(device.FieldUpdatedTime, field.TypeTime, value)
		_node.UpdatedTime = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(device.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.IP(); ok {
		_spec.SetField(device.FieldIP, field.TypeUint32, value)
		_node.IP = value
	}
	if value, ok := _c.mutation.LeasedAccessToken(); ok {
		_spec.SetField(device.FieldLeasedAccessToken, field.TypeString, value)
		_node.LeasedAccessToken = &value
	}
	if value, ok := _c.mutation.Token(); ok {
		_spec.SetField(device.FieldToken, field.TypeBytes, value)
		_node.Token = value
	}
	return _node, _spec
}

// DeviceCreateBulk is the builder for creating many Device entities in bulk.
type DeviceCreateBulk struct {
	config
	err      error
	builders []*DeviceCreate
}

// Save creates the Device entities in the database.
func (_c *DeviceCreateBulk) Save(ctx context.Context) ([]*Device, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Device, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *DeviceCreateBulk) SaveX(ctx context.Context) []*Device {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *DeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *DeviceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
