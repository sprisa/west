// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/sprisa/west/util/ipconv"
	"github.com/sprisa/west/westport/db/ent/predicate"
	"github.com/sprisa/west/westport/db/ent/settings"
	"github.com/sprisa/west/westport/db/helpers"
)

// SettingsUpdate is the builder for updating Settings entities.
type SettingsUpdate struct {
	config
	hooks    []Hook
	mutation *SettingsMutation
}

// Where appends a list predicates to the SettingsUpdate builder.
func (_u *SettingsUpdate) Where(ps ...predicate.Settings) *SettingsUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedTime sets the "updated_time" field.
func (_u *SettingsUpdate) SetUpdatedTime(v time.Time) *SettingsUpdate {
	_u.mutation.SetUpdatedTime(v)
	return _u
}

// SetDomainZone sets the "domain_zone" field.
func (_u *SettingsUpdate) SetDomainZone(v string) *SettingsUpdate {
	_u.mutation.SetDomainZone(v)
	return _u
}

// SetNillableDomainZone sets the "domain_zone" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableDomainZone(v *string) *SettingsUpdate {
	if v != nil {
		_u.SetDomainZone(*v)
	}
	return _u
}

// ClearDomainZone clears the value of the "domain_zone" field.
func (_u *SettingsUpdate) ClearDomainZone() *SettingsUpdate {
	_u.mutation.ClearDomainZone()
	return _u
}

// SetCipher sets the "cipher" field.
func (_u *SettingsUpdate) SetCipher(v string) *SettingsUpdate {
	_u.mutation.SetCipher(v)
	return _u
}

// SetNillableCipher sets the "cipher" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableCipher(v *string) *SettingsUpdate {
	if v != nil {
		_u.SetCipher(*v)
	}
	return _u
}

// SetCaCrt sets the "ca_crt" field.
func (_u *SettingsUpdate) SetCaCrt(v helpers.EncryptedBytes) *SettingsUpdate {
	_u.mutation.SetCaCrt(v)
	return _u
}

// SetCaKey sets the "ca_key" field.
func (_u *SettingsUpdate) SetCaKey(v helpers.EncryptedBytes) *SettingsUpdate {
	_u.mutation.SetCaKey(v)
	return _u
}

// SetLighthouseCrt sets the "lighthouse_crt" field.
func (_u *SettingsUpdate) SetLighthouseCrt(v helpers.EncryptedBytes) *SettingsUpdate {
	_u.mutation.SetLighthouseCrt(v)
	return _u
}

// SetLighthouseKey sets the "lighthouse_key" field.
func (_u *SettingsUpdate) SetLighthouseKey(v helpers.EncryptedBytes) *SettingsUpdate {
	_u.mutation.SetLighthouseKey(v)
	return _u
}

// SetCidr sets the "cidr" field.
func (_u *SettingsUpdate) SetCidr(v helpers.IpCidr) *SettingsUpdate {
	_u.mutation.SetCidr(v)
	return _u
}

// SetNillableCidr sets the "cidr" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillableCidr(v *helpers.IpCidr) *SettingsUpdate {
	if v != nil {
		_u.SetCidr(*v)
	}
	return _u
}

// SetPortOverlayIP sets the "port_overlay_ip" field.
func (_u *SettingsUpdate) SetPortOverlayIP(v ipconv.IP) *SettingsUpdate {
	_u.mutation.ResetPortOverlayIP()
	_u.mutation.SetPortOverlayIP(v)
	return _u
}

// SetNillablePortOverlayIP sets the "port_overlay_ip" field if the given value is not nil.
func (_u *SettingsUpdate) SetNillablePortOverlayIP(v *ipconv.IP) *SettingsUpdate {
	if v != nil {
		_u.SetPortOverlayIP(*v)
	}
	return _u
}

// AddPortOverlayIP adds value to the "port_overlay_ip" field.
func (_u *SettingsUpdate) AddPortOverlayIP(v ipconv.IP) *SettingsUpdate {
	_u.mutation.AddPortOverlayIP(v)
	return _u
}

// SetLetsencryptRegistration sets the "letsencrypt_registration" field.
func (_u *SettingsUpdate) SetLetsencryptRegistration(v helpers.EncryptedBytes) *SettingsUpdate {
	_u.mutation.SetLetsencryptRegistration(v)
	return _u
}

// ClearLetsencryptRegistration clears the value of the "letsencrypt_registration" field.
func (_u *SettingsUpdate) ClearLetsencryptRegistration() *SettingsUpdate {
	_u.mutation.ClearLetsencryptRegistration()
	return _u
}

// Mutation returns the SettingsMutation object of the builder.
func (_u *SettingsUpdate) Mutation() *SettingsMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SettingsUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SettingsUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingsUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SettingsUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedTime(); !ok {
		v := settings.UpdateDefaultUpdatedTime()
		_u.mutation.SetUpdatedTime(v)
	}
}

func (_u *SettingsUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedTime(); ok {
		_spec.SetField(settings.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DomainZone(); ok {
		_spec.SetField(settings.FieldDomainZone, field.TypeString, value)
	}
	if _u.mutation.DomainZoneCleared() {
		_spec.ClearField(settings.FieldDomainZone, field.TypeString)
	}
	if value, ok := _u.mutation.Cipher(); ok {
		_spec.SetField(settings.FieldCipher, field.TypeString, value)
	}
	if value, ok := _u.mutation.CaCrt(); ok {
		_spec.SetField(settings.FieldCaCrt, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.CaKey(); ok {
		_spec.SetField(settings.FieldCaKey, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.LighthouseCrt(); ok {
		_spec.SetField(settings.FieldLighthouseCrt, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.LighthouseKey(); ok {
		_spec.SetField(settings.FieldLighthouseKey, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.Cidr(); ok {
		_spec.SetField(settings.FieldCidr, field.TypeString, value)
	}
	if value, ok := _u.mutation.PortOverlayIP(); ok {
		_spec.SetField(settings.FieldPortOverlayIP, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedPortOverlayIP(); ok {
		_spec.AddField(settings.FieldPortOverlayIP, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.LetsencryptRegistration(); ok {
		_spec.SetField(settings.FieldLetsencryptRegistration, field.TypeBytes, value)
	}
	if _u.mutation.LetsencryptRegistrationCleared() {
		_spec.ClearField(settings.FieldLetsencryptRegistration, field.TypeBytes)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SettingsUpdateOne is the builder for updating a single Settings entity.
type SettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SettingsMutation
}

// SetUpdatedTime sets the "updated_time" field.
func (_u *SettingsUpdateOne) SetUpdatedTime(v time.Time) *SettingsUpdateOne {
	_u.mutation.SetUpdatedTime(v)
	return _u
}

// SetDomainZone sets the "domain_zone" field.
func (_u *SettingsUpdateOne) SetDomainZone(v string) *SettingsUpdateOne {
	_u.mutation.SetDomainZone(v)
	return _u
}

// SetNillableDomainZone sets the "domain_zone" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableDomainZone(v *string) *SettingsUpdateOne {
	if v != nil {
		_u.SetDomainZone(*v)
	}
	return _u
}

// ClearDomainZone clears the value of the "domain_zone" field.
func (_u *SettingsUpdateOne) ClearDomainZone() *SettingsUpdateOne {
	_u.mutation.ClearDomainZone()
	return _u
}

// SetCipher sets the "cipher" field.
func (_u *SettingsUpdateOne) SetCipher(v string) *SettingsUpdateOne {
	_u.mutation.SetCipher(v)
	return _u
}

// SetNillableCipher sets the "cipher" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableCipher(v *string) *SettingsUpdateOne {
	if v != nil {
		_u.SetCipher(*v)
	}
	return _u
}

// SetCaCrt sets the "ca_crt" field.
func (_u *SettingsUpdateOne) SetCaCrt(v helpers.EncryptedBytes) *SettingsUpdateOne {
	_u.mutation.SetCaCrt(v)
	return _u
}

// SetCaKey sets the "ca_key" field.
func (_u *SettingsUpdateOne) SetCaKey(v helpers.EncryptedBytes) *SettingsUpdateOne {
	_u.mutation.SetCaKey(v)
	return _u
}

// SetLighthouseCrt sets the "lighthouse_crt" field.
func (_u *SettingsUpdateOne) SetLighthouseCrt(v helpers.EncryptedBytes) *SettingsUpdateOne {
	_u.mutation.SetLighthouseCrt(v)
	return _u
}

// SetLighthouseKey sets the "lighthouse_key" field.
func (_u *SettingsUpdateOne) SetLighthouseKey(v helpers.EncryptedBytes) *SettingsUpdateOne {
	_u.mutation.SetLighthouseKey(v)
	return _u
}

// SetCidr sets the "cidr" field.
func (_u *SettingsUpdateOne) SetCidr(v helpers.IpCidr) *SettingsUpdateOne {
	_u.mutation.SetCidr(v)
	return _u
}

// SetNillableCidr sets the "cidr" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillableCidr(v *helpers.IpCidr) *SettingsUpdateOne {
	if v != nil {
		_u.SetCidr(*v)
	}
	return _u
}

// SetPortOverlayIP sets the "port_overlay_ip" field.
func (_u *SettingsUpdateOne) SetPortOverlayIP(v ipconv.IP) *SettingsUpdateOne {
	_u.mutation.ResetPortOverlayIP()
	_u.mutation.SetPortOverlayIP(v)
	return _u
}

// SetNillablePortOverlayIP sets the "port_overlay_ip" field if the given value is not nil.
func (_u *SettingsUpdateOne) SetNillablePortOverlayIP(v *ipconv.IP) *SettingsUpdateOne {
	if v != nil {
		_u.SetPortOverlayIP(*v)
	}
	return _u
}

// AddPortOverlayIP adds value to the "port_overlay_ip" field.
func (_u *SettingsUpdateOne) AddPortOverlayIP(v ipconv.IP) *SettingsUpdateOne {
	_u.mutation.AddPortOverlayIP(v)
	return _u
}

// SetLetsencryptRegistration sets the "letsencrypt_registration" field.
func (_u *SettingsUpdateOne) SetLetsencryptRegistration(v helpers.EncryptedBytes) *SettingsUpdateOne {
	_u.mutation.SetLetsencryptRegistration(v)
	return _u
}

// ClearLetsencryptRegistration clears the value of the "letsencrypt_registration" field.
func (_u *SettingsUpdateOne) ClearLetsencryptRegistration() *SettingsUpdateOne {
	_u.mutation.ClearLetsencryptRegistration()
	return _u
}

// Mutation returns the SettingsMutation object of the builder.
func (_u *SettingsUpdateOne) Mutation() *SettingsMutation {
	return _u.mutation
}

// Where appends a list predicates to the SettingsUpdate builder.
func (_u *SettingsUpdateOne) Where(ps ...predicate.Settings) *SettingsUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SettingsUpdateOne) Select(field string, fields ...string) *SettingsUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Settings entity.
func (_u *SettingsUpdateOne) Save(ctx context.Context) (*Settings, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SettingsUpdateOne) SaveX(ctx context.Context) *Settings {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SettingsUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SettingsUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedTime(); !ok {
		v := settings.UpdateDefaultUpdatedTime()
		_u.mutation.SetUpdatedTime(v)
	}
}

func (_u *SettingsUpdateOne) sqlSave(ctx context.Context) (_node *Settings, err error) {
	_spec := sqlgraph.NewUpdateSpec(settings.Table, settings.Columns, sqlgraph.NewFieldSpec(settings.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Settings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, settings.FieldID)
		for _, f := range fields {
			if !settings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != settings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedTime(); ok {
		_spec.SetField(settings.FieldUpdatedTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.DomainZone(); ok {
		_spec.SetField(settings.FieldDomainZone, field.TypeString, value)
	}
	if _u.mutation.DomainZoneCleared() {
		_spec.ClearField(settings.FieldDomainZone, field.TypeString)
	}
	if value, ok := _u.mutation.Cipher(); ok {
		_spec.SetField(settings.FieldCipher, field.TypeString, value)
	}
	if value, ok := _u.mutation.CaCrt(); ok {
		_spec.SetField(settings.FieldCaCrt, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.CaKey(); ok {
		_spec.SetField(settings.FieldCaKey, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.LighthouseCrt(); ok {
		_spec.SetField(settings.FieldLighthouseCrt, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.LighthouseKey(); ok {
		_spec.SetField(settings.FieldLighthouseKey, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.Cidr(); ok {
		_spec.SetField(settings.FieldCidr, field.TypeString, value)
	}
	if value, ok := _u.mutation.PortOverlayIP(); ok {
		_spec.SetField(settings.FieldPortOverlayIP, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedPortOverlayIP(); ok {
		_spec.AddField(settings.FieldPortOverlayIP, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.LetsencryptRegistration(); ok {
		_spec.SetField(settings.FieldLetsencryptRegistration, field.TypeBytes, value)
	}
	if _u.mutation.LetsencryptRegistrationCleared() {
		_spec.ClearField(settings.FieldLetsencryptRegistration, field.TypeBytes)
	}
	_node = &Settings{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{settings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
