// Code generated by ent, DO NOT EDIT.

package settings

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/sprisa/west/westport/db/ent/predicate"
	"github.com/sprisa/west/westport/db/helpers"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldID, id))
}

// CreatedTime applies equality check predicate on the "created_time" field. It's identical to CreatedTimeEQ.
func CreatedTime(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCreatedTime, v))
}

// UpdatedTime applies equality check predicate on the "updated_time" field. It's identical to UpdatedTimeEQ.
func UpdatedTime(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUpdatedTime, v))
}

// Cipher applies equality check predicate on the "cipher" field. It's identical to CipherEQ.
func Cipher(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCipher, v))
}

// CaCrt applies equality check predicate on the "ca_crt" field. It's identical to CaCrtEQ.
func CaCrt(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCaCrt, v))
}

// CaKey applies equality check predicate on the "ca_key" field. It's identical to CaKeyEQ.
func CaKey(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCaKey, v))
}

// LighthouseCrt applies equality check predicate on the "lighthouse_crt" field. It's identical to LighthouseCrtEQ.
func LighthouseCrt(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLighthouseCrt, v))
}

// LighthouseKey applies equality check predicate on the "lighthouse_key" field. It's identical to LighthouseKeyEQ.
func LighthouseKey(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLighthouseKey, v))
}

// CreatedTimeEQ applies the EQ predicate on the "created_time" field.
func CreatedTimeEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCreatedTime, v))
}

// CreatedTimeNEQ applies the NEQ predicate on the "created_time" field.
func CreatedTimeNEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCreatedTime, v))
}

// CreatedTimeIn applies the In predicate on the "created_time" field.
func CreatedTimeIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCreatedTime, vs...))
}

// CreatedTimeNotIn applies the NotIn predicate on the "created_time" field.
func CreatedTimeNotIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCreatedTime, vs...))
}

// CreatedTimeGT applies the GT predicate on the "created_time" field.
func CreatedTimeGT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCreatedTime, v))
}

// CreatedTimeGTE applies the GTE predicate on the "created_time" field.
func CreatedTimeGTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCreatedTime, v))
}

// CreatedTimeLT applies the LT predicate on the "created_time" field.
func CreatedTimeLT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCreatedTime, v))
}

// CreatedTimeLTE applies the LTE predicate on the "created_time" field.
func CreatedTimeLTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCreatedTime, v))
}

// UpdatedTimeEQ applies the EQ predicate on the "updated_time" field.
func UpdatedTimeEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldUpdatedTime, v))
}

// UpdatedTimeNEQ applies the NEQ predicate on the "updated_time" field.
func UpdatedTimeNEQ(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldUpdatedTime, v))
}

// UpdatedTimeIn applies the In predicate on the "updated_time" field.
func UpdatedTimeIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeNotIn applies the NotIn predicate on the "updated_time" field.
func UpdatedTimeNotIn(vs ...time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldUpdatedTime, vs...))
}

// UpdatedTimeGT applies the GT predicate on the "updated_time" field.
func UpdatedTimeGT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldUpdatedTime, v))
}

// UpdatedTimeGTE applies the GTE predicate on the "updated_time" field.
func UpdatedTimeGTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldUpdatedTime, v))
}

// UpdatedTimeLT applies the LT predicate on the "updated_time" field.
func UpdatedTimeLT(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldUpdatedTime, v))
}

// UpdatedTimeLTE applies the LTE predicate on the "updated_time" field.
func UpdatedTimeLTE(v time.Time) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldUpdatedTime, v))
}

// CipherEQ applies the EQ predicate on the "cipher" field.
func CipherEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCipher, v))
}

// CipherNEQ applies the NEQ predicate on the "cipher" field.
func CipherNEQ(v string) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCipher, v))
}

// CipherIn applies the In predicate on the "cipher" field.
func CipherIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCipher, vs...))
}

// CipherNotIn applies the NotIn predicate on the "cipher" field.
func CipherNotIn(vs ...string) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCipher, vs...))
}

// CipherGT applies the GT predicate on the "cipher" field.
func CipherGT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCipher, v))
}

// CipherGTE applies the GTE predicate on the "cipher" field.
func CipherGTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCipher, v))
}

// CipherLT applies the LT predicate on the "cipher" field.
func CipherLT(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCipher, v))
}

// CipherLTE applies the LTE predicate on the "cipher" field.
func CipherLTE(v string) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCipher, v))
}

// CipherContains applies the Contains predicate on the "cipher" field.
func CipherContains(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContains(FieldCipher, v))
}

// CipherHasPrefix applies the HasPrefix predicate on the "cipher" field.
func CipherHasPrefix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasPrefix(FieldCipher, v))
}

// CipherHasSuffix applies the HasSuffix predicate on the "cipher" field.
func CipherHasSuffix(v string) predicate.Settings {
	return predicate.Settings(sql.FieldHasSuffix(FieldCipher, v))
}

// CipherEqualFold applies the EqualFold predicate on the "cipher" field.
func CipherEqualFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldEqualFold(FieldCipher, v))
}

// CipherContainsFold applies the ContainsFold predicate on the "cipher" field.
func CipherContainsFold(v string) predicate.Settings {
	return predicate.Settings(sql.FieldContainsFold(FieldCipher, v))
}

// CaCrtEQ applies the EQ predicate on the "ca_crt" field.
func CaCrtEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCaCrt, v))
}

// CaCrtNEQ applies the NEQ predicate on the "ca_crt" field.
func CaCrtNEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCaCrt, v))
}

// CaCrtIn applies the In predicate on the "ca_crt" field.
func CaCrtIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCaCrt, vs...))
}

// CaCrtNotIn applies the NotIn predicate on the "ca_crt" field.
func CaCrtNotIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCaCrt, vs...))
}

// CaCrtGT applies the GT predicate on the "ca_crt" field.
func CaCrtGT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCaCrt, v))
}

// CaCrtGTE applies the GTE predicate on the "ca_crt" field.
func CaCrtGTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCaCrt, v))
}

// CaCrtLT applies the LT predicate on the "ca_crt" field.
func CaCrtLT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCaCrt, v))
}

// CaCrtLTE applies the LTE predicate on the "ca_crt" field.
func CaCrtLTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCaCrt, v))
}

// CaKeyEQ applies the EQ predicate on the "ca_key" field.
func CaKeyEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldCaKey, v))
}

// CaKeyNEQ applies the NEQ predicate on the "ca_key" field.
func CaKeyNEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldCaKey, v))
}

// CaKeyIn applies the In predicate on the "ca_key" field.
func CaKeyIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldCaKey, vs...))
}

// CaKeyNotIn applies the NotIn predicate on the "ca_key" field.
func CaKeyNotIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldCaKey, vs...))
}

// CaKeyGT applies the GT predicate on the "ca_key" field.
func CaKeyGT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldCaKey, v))
}

// CaKeyGTE applies the GTE predicate on the "ca_key" field.
func CaKeyGTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldCaKey, v))
}

// CaKeyLT applies the LT predicate on the "ca_key" field.
func CaKeyLT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldCaKey, v))
}

// CaKeyLTE applies the LTE predicate on the "ca_key" field.
func CaKeyLTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldCaKey, v))
}

// LighthouseCrtEQ applies the EQ predicate on the "lighthouse_crt" field.
func LighthouseCrtEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLighthouseCrt, v))
}

// LighthouseCrtNEQ applies the NEQ predicate on the "lighthouse_crt" field.
func LighthouseCrtNEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldLighthouseCrt, v))
}

// LighthouseCrtIn applies the In predicate on the "lighthouse_crt" field.
func LighthouseCrtIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldLighthouseCrt, vs...))
}

// LighthouseCrtNotIn applies the NotIn predicate on the "lighthouse_crt" field.
func LighthouseCrtNotIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldLighthouseCrt, vs...))
}

// LighthouseCrtGT applies the GT predicate on the "lighthouse_crt" field.
func LighthouseCrtGT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldLighthouseCrt, v))
}

// LighthouseCrtGTE applies the GTE predicate on the "lighthouse_crt" field.
func LighthouseCrtGTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldLighthouseCrt, v))
}

// LighthouseCrtLT applies the LT predicate on the "lighthouse_crt" field.
func LighthouseCrtLT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldLighthouseCrt, v))
}

// LighthouseCrtLTE applies the LTE predicate on the "lighthouse_crt" field.
func LighthouseCrtLTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldLighthouseCrt, v))
}

// LighthouseKeyEQ applies the EQ predicate on the "lighthouse_key" field.
func LighthouseKeyEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldEQ(FieldLighthouseKey, v))
}

// LighthouseKeyNEQ applies the NEQ predicate on the "lighthouse_key" field.
func LighthouseKeyNEQ(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNEQ(FieldLighthouseKey, v))
}

// LighthouseKeyIn applies the In predicate on the "lighthouse_key" field.
func LighthouseKeyIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldIn(FieldLighthouseKey, vs...))
}

// LighthouseKeyNotIn applies the NotIn predicate on the "lighthouse_key" field.
func LighthouseKeyNotIn(vs ...helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldNotIn(FieldLighthouseKey, vs...))
}

// LighthouseKeyGT applies the GT predicate on the "lighthouse_key" field.
func LighthouseKeyGT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGT(FieldLighthouseKey, v))
}

// LighthouseKeyGTE applies the GTE predicate on the "lighthouse_key" field.
func LighthouseKeyGTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldGTE(FieldLighthouseKey, v))
}

// LighthouseKeyLT applies the LT predicate on the "lighthouse_key" field.
func LighthouseKeyLT(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLT(FieldLighthouseKey, v))
}

// LighthouseKeyLTE applies the LTE predicate on the "lighthouse_key" field.
func LighthouseKeyLTE(v helpers.EncryptedBytes) predicate.Settings {
	return predicate.Settings(sql.FieldLTE(FieldLighthouseKey, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Settings) predicate.Settings {
	return predicate.Settings(sql.NotPredicates(p))
}
