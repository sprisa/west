// Code generated by ent, DO NOT EDIT.

package settings

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the settings type in the database.
	Label = "settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedTime holds the string denoting the created_time field in the database.
	FieldCreatedTime = "created_time"
	// FieldUpdatedTime holds the string denoting the updated_time field in the database.
	FieldUpdatedTime = "updated_time"
	// FieldDomainZone holds the string denoting the domain_zone field in the database.
	FieldDomainZone = "domain_zone"
	// FieldCipher holds the string denoting the cipher field in the database.
	FieldCipher = "cipher"
	// FieldCaCrt holds the string denoting the ca_crt field in the database.
	FieldCaCrt = "ca_crt"
	// FieldCaKey holds the string denoting the ca_key field in the database.
	FieldCaKey = "ca_key"
	// FieldLighthouseCrt holds the string denoting the lighthouse_crt field in the database.
	FieldLighthouseCrt = "lighthouse_crt"
	// FieldLighthouseKey holds the string denoting the lighthouse_key field in the database.
	FieldLighthouseKey = "lighthouse_key"
	// FieldCidr holds the string denoting the cidr field in the database.
	FieldCidr = "cidr"
	// FieldPortOverlayIP holds the string denoting the port_overlay_ip field in the database.
	FieldPortOverlayIP = "port_overlay_ip"
	// FieldLetsencryptRegistration holds the string denoting the letsencrypt_registration field in the database.
	FieldLetsencryptRegistration = "letsencrypt_registration"
	// FieldTLSCert holds the string denoting the tls_cert field in the database.
	FieldTLSCert = "tls_cert"
	// FieldTLSCertKey holds the string denoting the tls_cert_key field in the database.
	FieldTLSCertKey = "tls_cert_key"
	// Table holds the table name of the settings in the database.
	Table = "settings"
)

// Columns holds all SQL columns for settings fields.
var Columns = []string{
	FieldID,
	FieldCreatedTime,
	FieldUpdatedTime,
	FieldDomainZone,
	FieldCipher,
	FieldCaCrt,
	FieldCaKey,
	FieldLighthouseCrt,
	FieldLighthouseKey,
	FieldCidr,
	FieldPortOverlayIP,
	FieldLetsencryptRegistration,
	FieldTLSCert,
	FieldTLSCertKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedTime holds the default value on creation for the "created_time" field.
	DefaultCreatedTime func() time.Time
	// DefaultUpdatedTime holds the default value on creation for the "updated_time" field.
	DefaultUpdatedTime func() time.Time
	// UpdateDefaultUpdatedTime holds the default value on update for the "updated_time" field.
	UpdateDefaultUpdatedTime func() time.Time
	// DefaultCipher holds the default value on creation for the "cipher" field.
	DefaultCipher string
)

// OrderOption defines the ordering options for the Settings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedTime orders the results by the created_time field.
func ByCreatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedTime, opts...).ToFunc()
}

// ByUpdatedTime orders the results by the updated_time field.
func ByUpdatedTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedTime, opts...).ToFunc()
}

// ByDomainZone orders the results by the domain_zone field.
func ByDomainZone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDomainZone, opts...).ToFunc()
}

// ByCipher orders the results by the cipher field.
func ByCipher(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCipher, opts...).ToFunc()
}

// ByCidr orders the results by the cidr field.
func ByCidr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCidr, opts...).ToFunc()
}

// ByPortOverlayIP orders the results by the port_overlay_ip field.
func ByPortOverlayIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPortOverlayIP, opts...).ToFunc()
}
