// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/sprisa/west/util/ipconv"
	"github.com/sprisa/west/westport/db/ent/settings"
	"github.com/sprisa/west/westport/db/helpers"
)

// Settings is the model entity for the Settings schema.
type Settings struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Time ent was created
	CreatedTime time.Time `json:"created_time,omitempty"`
	// Time ent was updated
	UpdatedTime time.Time `json:"updated_time,omitempty"`
	// Domain zone to use for nameserver
	DomainZone string `json:"domain_zone,omitempty"`
	// Nebula cipher. aes or chachapoly
	Cipher string `json:"cipher,omitempty"`
	// CaCrt holds the value of the "ca_crt" field.
	CaCrt helpers.EncryptedBytes `json:"ca_crt,omitempty"`
	// CaKey holds the value of the "ca_key" field.
	CaKey helpers.EncryptedBytes `json:"-"`
	// LighthouseCrt holds the value of the "lighthouse_crt" field.
	LighthouseCrt helpers.EncryptedBytes `json:"-"`
	// LighthouseKey holds the value of the "lighthouse_key" field.
	LighthouseKey helpers.EncryptedBytes `json:"-"`
	// Network cidr range
	Cidr helpers.IpCidr `json:"cidr,omitempty"`
	// Network cidr range
	PortOverlayIP ipconv.IP `json:"port_overlay_ip,omitempty"`
	// LetsencryptRegistration holds the value of the "letsencrypt_registration" field.
	LetsencryptRegistration helpers.EncryptedBytes `json:"-"`
	// TLSCert holds the value of the "tls_cert" field.
	TLSCert      *helpers.EncryptedBytes `json:"-"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Settings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case settings.FieldTLSCert:
			values[i] = &sql.NullScanner{S: new(helpers.EncryptedBytes)}
		case settings.FieldCaCrt, settings.FieldCaKey, settings.FieldLighthouseCrt, settings.FieldLighthouseKey, settings.FieldLetsencryptRegistration:
			values[i] = new(helpers.EncryptedBytes)
		case settings.FieldCidr:
			values[i] = new(helpers.IpCidr)
		case settings.FieldID, settings.FieldPortOverlayIP:
			values[i] = new(sql.NullInt64)
		case settings.FieldDomainZone, settings.FieldCipher:
			values[i] = new(sql.NullString)
		case settings.FieldCreatedTime, settings.FieldUpdatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Settings fields.
func (_m *Settings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case settings.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case settings.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				_m.CreatedTime = value.Time
			}
		case settings.FieldUpdatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_time", values[i])
			} else if value.Valid {
				_m.UpdatedTime = value.Time
			}
		case settings.FieldDomainZone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_zone", values[i])
			} else if value.Valid {
				_m.DomainZone = value.String
			}
		case settings.FieldCipher:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cipher", values[i])
			} else if value.Valid {
				_m.Cipher = value.String
			}
		case settings.FieldCaCrt:
			if value, ok := values[i].(*helpers.EncryptedBytes); !ok {
				return fmt.Errorf("unexpected type %T for field ca_crt", values[i])
			} else if value != nil {
				_m.CaCrt = *value
			}
		case settings.FieldCaKey:
			if value, ok := values[i].(*helpers.EncryptedBytes); !ok {
				return fmt.Errorf("unexpected type %T for field ca_key", values[i])
			} else if value != nil {
				_m.CaKey = *value
			}
		case settings.FieldLighthouseCrt:
			if value, ok := values[i].(*helpers.EncryptedBytes); !ok {
				return fmt.Errorf("unexpected type %T for field lighthouse_crt", values[i])
			} else if value != nil {
				_m.LighthouseCrt = *value
			}
		case settings.FieldLighthouseKey:
			if value, ok := values[i].(*helpers.EncryptedBytes); !ok {
				return fmt.Errorf("unexpected type %T for field lighthouse_key", values[i])
			} else if value != nil {
				_m.LighthouseKey = *value
			}
		case settings.FieldCidr:
			if value, ok := values[i].(*helpers.IpCidr); !ok {
				return fmt.Errorf("unexpected type %T for field cidr", values[i])
			} else if value != nil {
				_m.Cidr = *value
			}
		case settings.FieldPortOverlayIP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port_overlay_ip", values[i])
			} else if value.Valid {
				_m.PortOverlayIP = ipconv.IP(value.Int64)
			}
		case settings.FieldLetsencryptRegistration:
			if value, ok := values[i].(*helpers.EncryptedBytes); !ok {
				return fmt.Errorf("unexpected type %T for field letsencrypt_registration", values[i])
			} else if value != nil {
				_m.LetsencryptRegistration = *value
			}
		case settings.FieldTLSCert:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field tls_cert", values[i])
			} else if value.Valid {
				_m.TLSCert = new(helpers.EncryptedBytes)
				*_m.TLSCert = *value.S.(*helpers.EncryptedBytes)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Settings.
// This includes values selected through modifiers, order, etc.
func (_m *Settings) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Settings.
// Note that you need to call Settings.Unwrap() before calling this method if this Settings
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Settings) Update() *SettingsUpdateOne {
	return NewSettingsClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Settings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Settings) Unwrap() *Settings {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Settings is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Settings) String() string {
	var builder strings.Builder
	builder.WriteString("Settings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_time=")
	builder.WriteString(_m.CreatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_time=")
	builder.WriteString(_m.UpdatedTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("domain_zone=")
	builder.WriteString(_m.DomainZone)
	builder.WriteString(", ")
	builder.WriteString("cipher=")
	builder.WriteString(_m.Cipher)
	builder.WriteString(", ")
	builder.WriteString("ca_crt=")
	builder.WriteString(fmt.Sprintf("%v", _m.CaCrt))
	builder.WriteString(", ")
	builder.WriteString("ca_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("lighthouse_crt=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("lighthouse_key=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("cidr=")
	builder.WriteString(fmt.Sprintf("%v", _m.Cidr))
	builder.WriteString(", ")
	builder.WriteString("port_overlay_ip=")
	builder.WriteString(fmt.Sprintf("%v", _m.PortOverlayIP))
	builder.WriteString(", ")
	builder.WriteString("letsencrypt_registration=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("tls_cert=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// SettingsSlice is a parsable slice of Settings.
type SettingsSlice []*Settings
